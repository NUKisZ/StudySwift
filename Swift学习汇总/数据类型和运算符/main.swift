//
//  数据类型和运算符.swift
//  Swift学习汇总
//
//  Created by NUK on 16/6/18.
//  Copyright © 2016年 NUK. All rights reserved.
//

import Foundation

//Swift2.2版本
//Swift 苹果2014年推出于WWDC  运行于Mac,OS和iOS平台
//易学易用
//Swift设计安全为出发点,以避免各种常见的编程错误
//2015年12月4日,苹果让Swift开源,加快Swift进程
//操作特点:对初学者很友好,很容易上手
//iOS,tvOS...服务器级别
//苹果的目标:在一两年内用swift代替OC成为iOS新开发语言
//以后每一台设备上都用swift编写


//注释:Swift中有两种注释  单行注释//   多行注释/*...*/
/*标识符:所谓标识符就是给程序中变量,类,结构体,枚举,函数等命名的名字,
在swift中标识符必须是字符,下划线,但是不能以数字开头,字符不
局限于二十六个字母,可以使其他字符.Swift是Unicode编码(万国
码)
*/
//在Swift中声明变量和常量
//声明一个变量可以使用var关键字
//格式: var 变量名 :类型 =初始值     (:类型 告诉当前变量或常量类型是什么)
//var a:Int = 10
//声明常量用let关键字
//格式: let 变量名:类型=初始值
//let b:String = "hello swift"
//class 类 对象存到数组当中  遍历数组  let

//赋值运算符=  作用是把某个变量或常量或表达式的值赋值给另一个变量
/*
1.等号的右边可以是常量,变量,表达式
2.等号左边只能是变量
*/
//Swift 是强类型语言,Swift要求所有的常量和变量必须先声明后使用,声明常量和
//      变量的时候必须[显示]或是[隐式]的指定变量的类型,类型限制了一个变量能
//      被赋的值,也限制了表达式可以产生的值,还限制了这些值可以进行的操作

//显式和隐式
//显示的方式定义一个常量和变量
var a:Int=10
let b:Double=10.0
//隐式的方式定义一个变量和常量
let d = 10.0  //默认Double类型
//隐式指定类型,是系统通过编译器自动推断的类型
//ps:类型推断是一种编译器计数,也是函数式编程语言的

//变量和常量可以同时初始化多个变量或常量
var aa=10,bb=20
let cc=10.0,dd="ddd"

/*Swift分为三种常量:
1.局部范围的常量:这种常量允许在声明时不指定初始值,只要在第一次使用之前指定初始值即可
let Name:String
Name="Jack"
2.全局范围的常量:这种常量必须在声明时指定初始值
let age = 12
3.类,结构体的常量属性,这种长两属性既可以在声明时指定初始化值,也可以在类或结构体的构
造器中指定初始化值
*/

/*
快捷键 command+r运行   command+b编译   command+. 结束程序
command+shift+y 打印区  command+z 回退  command+shift+z前进
command+c,v,x   command+a 全选   command+tab切换窗口  command+~ 同程序的窗口切换
*/

//Swift 常用的打印语句
//print("hello swift")
//第一种直接打印:在当前打印语句中直接写入变量或常量的名字,print会自动换行,如果余姚打印多
//个变量可以用逗号隔开,如果要打印字符串用双引号引起来
//第二种拼接打印:
//第一个参数:变量或常量  第二个参数:用于输出指定内容的分隔符,可以省略  第三个参数:用于指
//定输出所有内容之后的终止符"\n"换行  "\t"空格,可以省略
//print(aa,bb, separator: ",", terminator: "\n")
//某些时候我们需要打印拼接或自定义变量或常量的值添加到打印语句中
//串插入  格式: "\(变量名)"
//print("小明的年龄:\(aa)")
//print("\(dd)")//<同等于>print(dd)

//Swift中常用的基本数据类型:
/*
Int       整型
Float     单精度浮点型
Double    双精度浮点型
Bool      布尔
Character 字符型

UInt   Unsigned表示无符号,也就是说只能存储正数,不能存储负数,极少使用
Int8:在内存中占8位,表示-128~127
1字节=8位(0000 0000)
Int16:在内存中占16位,表示-2^15~2^15-1
Int32:在内存中占32位,表示-2^31~2^31-1
Int64:在内存中占64位,表示-2^63~2^63-1
正常来说我们使用Int就已经足够了,一般Int类型在32位平台与Int32的长度相同,对于64位平台
Int和Int64的长度相同,所以我们真正应用的时候都是使用Int
iphone5s之后以及其他的苹果产品都是64位系统
在Swift中字符使用"",单字符也用"",字符类型不能像其他语言一样做四则运算.

//字符类型声明不能用隐式声明
//var ch:Character="a"
//强制类型转换  类型(变量名)

Bool 值只有两个  true真和false假
let b:Bool=true


*/

/*练习:
1.创建一个常量和变量,用显式的方式定义类型为Float和Double并指定初始值为3.141562757并打印出来
*/
//var pai1:Float=3.141592657
//let pai2:Double=3.141592657
//print(pai1,pai2)
//print(pai1,pai2, separator: ",", terminator: "\n")
//print("pai1=\(pai1)   pai2=\(pai2)")
//Float类型在Swift中精确存储到6位.Double可以精确到15位
//当使用Float类型的时候如果第七位大于5可能会出现四舍五入的进位关系


//千分位和万分位
//var 💰=1_000_000_000
//💰=1_0000_0000_0000

/*---元祖---*/
////元祖把多个值组合成一个复合值,元祖内的值可以使任意类型,并不要求类型相同
////在这里你可以把元祖看成是一个大的数据集合,可以把任何类型放到这个元组中
//let zhige=(18,"男","葫芦岛",100.5)
//let Bge=(1,"中性")
////你可以将元祖的内容分解成单独的常量或变量,然后就可以正常的使用他们了
//let (age,sex)=Bge
//print("逼哥的年龄:\(age)")
//print("逼哥的年龄:\(sex)")
////如果只需要使用元素中某一个值,那么分解的时候可以在你不用的位置上使用_代替
//let (age1,_,_,_)=zhige
//print("智哥的年龄:\(age1)")
////除此之外,我们在使用元祖的时候,我们还可以通过下标的方式去除元祖中的值
//let age2=Bge.0
//print(age2)
////在定义元祖的同时可以给单个元素命名
//let Miss = (sex1:"女",age3:20)
//print(Miss)

//元祖在临时组织值的时候很有用,但是并不适合创建复杂的数据结构,如果你的数据结构
//是并不是临时使用,请使用类或是结构体而不是元祖
//元祖主要应用于函数的返回值

//思考:交换多个变量的值
// var (a1,b1,c1) = (1,2,3)  //312
//print(a1)
//print(b1)
//print(c1)
////var temp:Int
////temp=a1
////a1=c1
////c1=b1
////b1=temp
////=从右向左
//(a1,b1,c1)=(c1,a1,b1)
//print(a1)
//print(b1)
//print(c1)

/*---运算符---*/
/*
术语:一元,二元和三元运算符
一元运算符操作的对象是(-a)运算符和一个变量组成
二元运算符操作的对象是(2+b)运算符和两个常量或变量组成
三元运算符操作的对象是(a?b:c)运算符和三个变量组成
*/
//表达式:由常量或变量和运算符组成的式子
//算术运算符
//+-*/%
//在其他语言中%只能在整数之间求余,在Swift中可以给小树求余
//因为Swift是一门类型安全的语言,所以求余的数需要一致性,否则会报错,在此存在的特殊情况

//var a2=10
//var b2=1.1
//var c2=Double(a2)+b2

//求7和3的和差积商和余数
//设圆的半径r=1.5,求周长和面积

#if true//true运行 flase不运行
var num1=7
var num2=3
var sum=num1+num2
var cha=num1-num2
var ji=num1*num2
var shang=num1/num2
var yu=num1%num2
print("7和3的和:\(sum)")
print("7和3的差:\(cha)")
print("7和3的积:\(ji)")
print("7和3的商:\(shang)")
print("7和3的求余:\(yu)")
//pow(r,2)  pow(Double,Double)求次方
var r=1.5
let pai=3.14159
var zhouchang=pai*r*2
var mianji=pai*r*r
print("圆的周长:\(zhouchang)")
print("圆的面积:\(mianji)")
#endif

